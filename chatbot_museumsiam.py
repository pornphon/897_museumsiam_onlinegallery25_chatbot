#‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô  ‡πÄ‡∏õ‡∏¥‡∏î xampp(mysql)

import os
import streamlit as st
from dotenv import load_dotenv
import pymysql
import re

from chatbot_stt_tts import tts

from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain_pinecone import PineconeVectorStore
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain_core.tools import tool
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
from pinecone import Pinecone
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder, HumanMessagePromptTemplate, SystemMessagePromptTemplate

# ‡πÇ‡∏´‡∏•‡∏î ENV
load_dotenv()
PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
INDEX_NAME = os.getenv("PINECONE_INDEX")

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Pinecone
pc = Pinecone(api_key=PINECONE_API_KEY)

index_names = {
    "name_th": "antiquities-name-th-index",
    "material_tags": "antiquities-material-tags-index",
    "artistic_description_th": "antiquities-artistic-description-th-index",
    "place_tags": "antiquities-place-tags-index",
    "historical_description_th": "antiquities-description-th-index"
}

# ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞ index 
index_name = pc.Index(index_names["name_th"])
index_material = pc.Index(index_names["material_tags"])
index_artistic = pc.Index(index_names["artistic_description_th"])
index_place = pc.Index(index_names["place_tags"])
index_history = pc.Index(index_names["historical_description_th"])

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Embeddings ‡πÅ‡∏•‡∏∞ LLM
embeddings = OpenAIEmbeddings(model="text-embedding-3-small")
llm = ChatOpenAI(model="gpt-4o")

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° VectorStores
vectorstore_name = PineconeVectorStore(index=index_name, embedding=embeddings, namespace="")
vectorstore_material = PineconeVectorStore(index=index_material, embedding=embeddings, namespace="")
vectorstore_artistic = PineconeVectorStore(index=index_artistic, embedding=embeddings, namespace="")
vectorstore_place = PineconeVectorStore(index=index_place, embedding=embeddings, namespace="")
vectorstore_history = PineconeVectorStore(index=index_history, embedding=embeddings, namespace="")


#get only 1 ids each call
def get_antiquity_by_id_from_db(antiquity_id: str) -> dict:
    conn = pymysql.connect(
        host='localhost',
        user='root',
        password='',
        database='vm_siam',
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT * FROM antiquities WHERE id = %s", (antiquity_id,))
            return cursor.fetchone()
    finally:
        conn.close()

#get array of list 
def get_antiquities_by_id_from_db(ids: list[str]) -> list[dict]:
    if not ids:
        return []
    
    with db_conn.cursor() as cursor:
        format_strings = ','.join(['%s'] * len(ids))
        query = f"SELECT * FROM antiquities WHERE id IN ({format_strings})"
        cursor.execute(query, tuple(ids))
        return cursor.fetchall()
    
    # conn = pymysql.connect(
    #     host='localhost',
    #     user='root',
    #     password='',
    #     database='vm_siam',
    #     charset='utf8mb4',
    #     cursorclass=pymysql.cursors.DictCursor
    # )
    # try:





def get_db_connection():
    return pymysql.connect(
        host='localhost',
        user='root',
        password='',
        database='vm_siam',
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

db_conn = get_db_connection()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Tools
@tool
def search_by_name(query: str) -> str:
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠ ‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô (name_th) ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô ID ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤"""
    retriever = vectorstore_name.as_retriever(search_type="similarity", search_kwargs={"k": 2})
    docs = retriever.invoke(query)

    if not docs:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    ids = [doc.metadata.get("id", "") for doc in docs if doc.metadata.get("id")]
       
    results = []
    textoutput =f"search_by_name ‡∏û‡∏ö ID ‡∏à‡∏≤‡∏Å Pinecone {len(ids)}: {', '.join(ids)}"
    st.write(textoutput)

    antiquities = get_antiquities_by_id_from_db(ids)

    for data in antiquities:
        summary = f"üÜî {data['id']}\nüìõ ‡∏ä‡∏∑‡πà‡∏≠: {data.get('name_th', '-')}\nüìú ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {data.get('artistic_description_th', '-')}\nüìç ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö: {data.get('place_found', '-')}\nüìç thumbnail: {data.get('thumbnail', '-')}"
        print("result: "+summary)
        results.append(summary)
    return "\n\n".join(results)
    
    # for id in ids:
    #     data = get_antiquity_by_id_from_db(id)
    #     if data:
    #         # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á field ‡∏Å‡πá‡πÑ‡∏î‡πâ
    #         summary = f"üÜî {data['id']}\nüìõ ‡∏ä‡∏∑‡πà‡∏≠: {data.get('name_th', '-')}\nüìú ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {data.get('artistic_description_th', '-')}\nüìç ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö: {data.get('place_found', '-')}\nüìç thumbnail: {data.get('thumbnail', '-')}"
    #         # print("result: "+summary)
    #         results.append(summary)
    # return "\n\n".join(results)

@tool
def search_by_material(query: str) -> str:
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏ (material_tags) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô ID ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤"""
    retriever = vectorstore_material.as_retriever(search_type="similarity", search_kwargs={"k": 3})
    docs = retriever.invoke(query)

    if not docs:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    ids = [doc.metadata.get("id", "") for doc in docs if doc.metadata.get("id")]
       
    results = []
    textoutput =f"search_by_material ‡∏û‡∏ö ID ‡∏à‡∏≤‡∏Å Pinecone {len(ids)}: {', '.join(ids)}"
    st.write(textoutput)
    
    for id in ids:
        data = get_antiquity_by_id_from_db(id)
        if data:
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á field ‡∏Å‡πá‡πÑ‡∏î‡πâ
            summary = f"üÜî {data['id']}\nüìõ ‡∏ä‡∏∑‡πà‡∏≠: {data.get('name_th', '-')}\nüìú ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {data.get('artistic_description_th', '-')}\nüìç ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö: {data.get('place_found', '-')}\nüìç thumbnail: {data.get('thumbnail', '-')}"
            print("result: "+summary)
            results.append(summary)
    return "\n\n".join(results)

@tool
def search_by_artistic_description(query: str) -> str:
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏®‡∏¥‡∏•‡∏õ‡∏∞ (artistic_description_th) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô ID ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤"""
    retriever = vectorstore_artistic.as_retriever(search_type="similarity", search_kwargs={"k": 3})
    docs = retriever.invoke(query)

    if not docs:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    ids = [doc.metadata.get("id", "") for doc in docs if doc.metadata.get("id")]
       
    results = []
    textoutput =f"search_by_artistic_description ‡∏û‡∏ö ID ‡∏à‡∏≤‡∏Å Pinecone {len(ids)}: {', '.join(ids)}"
    st.write(textoutput)
    
    for id in ids:
        data = get_antiquity_by_id_from_db(id)
        if data:
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á field ‡∏Å‡πá‡πÑ‡∏î‡πâ
            summary = f"üÜî {data['id']}\nüìõ ‡∏ä‡∏∑‡πà‡∏≠: {data.get('name_th', '-')}\nüìú ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {data.get('artistic_description_th', '-')}\nüìç ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö: {data.get('place_found', '-')}\nüìç thumbnail: {data.get('thumbnail', '-')}"
            print("result: "+summary)
            results.append(summary)
    return "\n\n".join(results)

@tool
def search_by_place_tags(query: str) -> str:
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï (place_tags) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô ID ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤"""
    retriever = vectorstore_place.as_retriever(search_type="similarity", search_kwargs={"k": 3})
    docs = retriever.invoke(query)

    if not docs:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    ids = [doc.metadata.get("id", "") for doc in docs if doc.metadata.get("id")]
       
    results = []
    textoutput =f"search_by_artistic_description ‡∏û‡∏ö ID ‡∏à‡∏≤‡∏Å Pinecone {len(ids)}: {', '.join(ids)}"
    st.write(textoutput)
    
    for id in ids:
        data = get_antiquity_by_id_from_db(id)
        if data:
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á field ‡∏Å‡πá‡πÑ‡∏î‡πâ
            summary = f"üÜî {data['id']}\nüìõ ‡∏ä‡∏∑‡πà‡∏≠: {data.get('name_th', '-')}\nüìú ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {data.get('artistic_description_th', '-')}\nüìç ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö: {data.get('place_found', '-')}\nüìç thumbnail: {data.get('thumbnail', '-')}"
            print("result: "+summary)
            results.append(summary)
    return "\n\n".join(results)

@tool
def search_by_description(query: str) -> str:
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ (historical_background_description_th) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô ID ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤"""
    retriever = vectorstore_history.as_retriever(search_kwargs={"k": 3})
    docs = retriever.invoke(query)
    return ",".join(doc.metadata.get("id", "") for doc in docs)

@tool #‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡πÄ‡∏≠‡∏≤‡∏à‡∏≤‡∏Å DB
def general_information(query: str) -> str:
    """‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö museumsiam ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà, ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î"""
    result ="""‡∏°‡∏¥‡∏ß‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏™‡∏¢‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠ ‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©: Museum Siam, Discovery Museum) ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡πÑ‡∏ä‡∏¢ ‡πÅ‡∏Ç‡∏ß‡∏á‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á ‡πÄ‡∏Ç‡∏ï‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠ 2 ‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô ‡∏û.‡∏®. 2551 ‡∏°‡∏¥‡∏ß‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏™‡∏¢‡∏≤‡∏°‡∏î‡∏π‡πÅ‡∏•‡πÇ‡∏î‡∏¢‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥
‡∏°‡∏¥‡∏ß‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏™‡∏¢‡∏≤‡∏° ‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ô‡∏µ‡πâ ‡∏ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡πâ‡∏ô‡∏à‡∏∏‡∏î‡∏°‡∏∏‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡∏ô‡πÉ‡∏ô‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏° ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏¥‡πà‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ß‡∏±‡∏¢‡πÄ‡∏î‡πá‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏¢‡∏≤‡∏ß‡∏ä‡∏ô ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏£‡∏≤‡∏Å‡πÄ‡∏´‡∏á‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ä‡∏≤‡∏ß‡πÑ‡∏ó‡∏¢ ‡πÇ‡∏î‡∏¢‡πÄ‡∏ô‡πâ‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ä‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ö‡∏≤‡∏á‡∏Å‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ß‡πà‡∏≤ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏°‡∏¥‡∏ß‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏™‡∏¢‡∏≤‡∏°‡πÅ‡∏´‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ ‡πÅ‡∏ï‡πà‡∏°‡∏¥‡πÑ‡∏î‡πâ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÑ‡∏ó‡∏¢‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏π‡πâ ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏ô‡∏°‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏£‡πà‡∏ß‡∏°‡∏™‡∏°‡∏±‡∏¢‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏≠‡∏î‡∏µ‡∏ï‡∏ñ‡∏∂‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏∑‡πà‡∏≠‡∏ú‡∏™‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î‡πÉ‡∏à‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏¥‡πà‡∏á ‡∏ó‡∏±‡πâ‡∏á‡∏¢‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£‡∏ä‡∏∏‡∏î ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 18 ‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô 2559 ‡∏ï‡πà‡∏≠‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢ ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏° ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏î‡∏ß‡πà‡∏≤ ‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£ "‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ó‡∏¢" ‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 14 ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£ ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏û‡∏≤‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏∏‡∏Å‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢ ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏≠‡∏î‡∏µ‡∏ï‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏≠‡∏≤‡∏ó‡∏¥ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏î‡πâ‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏° ‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô ‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£ "‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢" ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏±‡∏ö Muse Mobile ‡∏°‡∏¥‡∏ß‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏ï‡∏¥‡∏î‡∏•‡πâ‡∏≠ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏π‡πâ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏à‡∏±‡∏î‡πÅ‡∏™‡∏î‡∏á ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ô‡πÑ‡∏ó‡∏¢ ‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢‡πÉ‡∏ô‡∏ï‡∏π‡πâ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ 10.00 - 18.00 ‡∏ô.
‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£-‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
"""
    return result

tools = [
    search_by_name,
    search_by_material,
    search_by_artistic_description,
    search_by_place_tags,
    search_by_description,
    general_information
]

# Prompt Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ
agent_prompt = ChatPromptTemplate.from_messages([
    SystemMessagePromptTemplate.from_template(
    """
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ô‡∏¥‡∏™‡∏±‡∏¢‡∏£‡πà‡∏≤‡πÄ‡∏£‡∏¥‡∏á 

‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ ‡∏°‡∏≤‡πÅ‡∏Ñ‡πà 1 ‡∏ä‡∏¥‡πâ‡∏ô:

id: [‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏]  
thumbnail: [URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ]  
‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: [‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏¢‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏≠‡∏ö]
URL: [https://collection360.museumsiam.org/antiquities/detail/?id=[‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏]]

‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"
"""
    ),
    HumanMessagePromptTemplate.from_template("{input}"),
    MessagesPlaceholder(variable_name="agent_scratchpad"),
])


# ‡∏™‡∏£‡πâ‡∏≤‡∏á Agent ‡∏û‡∏£‡πâ‡∏≠‡∏° Prompt
agent = create_openai_functions_agent(llm=llm, tools=tools, prompt=agent_prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools)


st.set_page_config(page_title="Museum Chatbot", page_icon="üè∫")
st.title("Museum Siam - RAG + Agent")

question = st.text_input("üì• ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:")
# Streamlit ‡πÄ‡∏£‡∏¥‡πà‡∏°


def extract_description(text):
    match = re.search(r"‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:\s*(.+)", text)
    if match:
        print(f"Extract Des: {match.group(1).strip()}")
        return match.group(1).strip()
    return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"


if question:
    with st.spinner("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö..."):
        # Step 1: ‡πÉ‡∏ä‡πâ Agent ‡∏´‡∏≤ IDs
        agent_result = agent_executor.invoke({"input": question})
        ids = agent_result.get("output", "").split(",")
        st.write("agent_executor result: \n"+agent_result["output"])
        description_only=extract_description(agent_result["output"])
        #audio_url=tts(description_only)
        #if audio_url:
        #    st.audio(audio_url,format='audio/m4a')
